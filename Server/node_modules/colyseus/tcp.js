// Load the TCP Library
const net = require('net');
const msgpack = require('notepack.io');
const PORT = 8181;

// Keep track of the chat clients
let clients = [];

// Start a TCP Server
let server = net.createServer(function (socket) {
  // Identify this client
  socket.name = socket.remoteAddress + ":" + socket.remotePort;

  console.log("NEW CLIENT:", socket.name);

  // Put this new client in the list
  clients.push(socket);

  // Send a nice welcome message and announce
  // socket.write( msgpack.encode([2050, "12dg9182hd"]) );
  socket.write( new Buffer([ 146, 15, 220, 0, 39, 84, 10, 84, 58, 204, 129, 204, 168, 109, 101, 115, 115, 97, 103, 101, 115, 204, 145, 204, 177, 114, 107, 82, 120, 97, 115, 97, 98, 109, 32, 106, 111, 105, 110, 101, 100, 46, 110, 126, 69, 71, 102, 59 ])  );

  // Handle incoming messages from clients.
  socket.on('data', function (data) {
    console.log("RECEIVED MESSAGE:", data);
    broadcast(socket.name + "> " + data, socket);
  });

  // Remove the client from the list when it leaves
  socket.on('end', function () {
    console.log(`client ${socket.name} left!`);
    clients.splice(clients.indexOf(socket), 1);
    broadcast(socket.name + " left the chat.\n");
  });

  // Send a message to all clients
  function broadcast(message, sender) {
    clients.forEach(function (client) {
      // Don't want to send it to sender
      if (client === sender) return;
      client.write(message);
    });

    // Log it to the server output too
    process.stdout.write(message)
  }

});

server.listen(PORT, '127.0.0.1', function() {
  // Put a friendly message on the terminal of the server.
  console.log(`TCP server running at port ${PORT}`);
});

